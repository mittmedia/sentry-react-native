{"version":3,"file":"backend.js","sourceRoot":"","sources":["../../src/js/backend.ts"],"names":[],"mappings":"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","sourcesContent":["import { BrowserOptions, Transports } from \"@sentry/browser\";\nimport { BrowserBackend } from \"@sentry/browser/dist/backend\";\nimport { BaseBackend, getCurrentHub, NoopTransport } from \"@sentry/core\";\nimport { Event, EventHint, Severity, Transport } from \"@sentry/types\";\nimport { Alert, NativeModules, YellowBox } from \"react-native\";\n\nimport { NativeTransport } from \"./transports/native\";\n\nconst { RNSentry } = NativeModules;\n\n/**\n * Configuration options for the Sentry ReactNative SDK.\n * @see ReactNativeFrontend for more information.\n */\nexport interface ReactNativeOptions extends BrowserOptions {\n  /**\n   * Enables native transport + device info + offline caching.\n   * Be careful, disabling this also breaks automatic release setting.\n   * This means you have to manage setting the release yourself.\n   * Defaults to `true`.\n   */\n  enableNative?: boolean;\n\n  /**\n   * Enables native crashHandling. This only works if `enableNative` is `true`.\n   * Defaults to `true`.\n   */\n  enableNativeCrashHandling?: boolean;\n\n  /** Maximum time to wait to drain the request queue, before the process is allowed to exit. */\n  shutdownTimeout?: number;\n\n  /** Should the native nagger alert be shown or not. */\n  enableNativeNagger?: boolean;\n}\n\n/** The Sentry ReactNative SDK Backend. */\nexport class ReactNativeBackend extends BaseBackend<BrowserOptions> {\n  private readonly _browserBackend: BrowserBackend;\n\n  /** Creates a new ReactNative backend instance. */\n  public constructor(protected readonly _options: ReactNativeOptions) {\n    super(_options);\n    this._browserBackend = new BrowserBackend(_options);\n\n    // This is a workaround for now using fetch on RN, this is a known issue in react-native and only generates a warning\n    YellowBox.ignoreWarnings([\"Require cycle:\"]);\n\n    // tslint:disable: no-unsafe-any\n    if (\n      RNSentry &&\n      RNSentry.nativeClientAvailable &&\n      _options.enableNative !== false\n    ) {\n      RNSentry.startWithDsnString(_options.dsn, _options).then(() => {\n        RNSentry.setLogLevel(_options.debug ? 2 : 1);\n      });\n      // Workaround for setting release/dist on native\n      const scope = getCurrentHub().getScope();\n      if (scope) {\n        scope.addScopeListener(scope =>\n          RNSentry.extraUpdated((scope as any)._extra)\n        );\n      }\n    } else {\n      if (__DEV__ && _options.enableNativeNagger) {\n        Alert.alert(\n          \"Sentry\",\n          \"Warning, could not connect to Sentry native SDK.\\nIf you do not want to use the native component please pass `enableNative: false` in the options.\\nVisit: https://docs.sentry.io/platforms/react-native/#linking for more details.\"\n        );\n      }\n    }\n    // tslint:enable: no-unsafe-any\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _setupTransport(): Transport {\n    if (!this._options.dsn) {\n      // We return the noop transport here in case there is no Dsn.\n      return new NoopTransport();\n    }\n\n    const transportOptions = {\n      ...this._options.transportOptions,\n      dsn: this._options.dsn\n    };\n\n    if (this._options.transport) {\n      return new this._options.transport(transportOptions);\n    }\n\n    if (this._isNativeTransportAvailable()) {\n      return new NativeTransport();\n    }\n\n    return new Transports.FetchTransport(transportOptions);\n  }\n\n  /**\n   * If true, native client is availabe and active\n   */\n  private _isNativeTransportAvailable(): boolean {\n    // tslint:disable: no-unsafe-any\n    return (\n      this._options.enableNative &&\n      RNSentry &&\n      RNSentry.nativeClientAvailable &&\n      RNSentry.nativeTransport\n    );\n    // tslint:enable: no-unsafe-any\n  }\n\n  /**\n   * If native client is available it will trigger a native crash.\n   * Use this only for testing purposes.\n   */\n  public nativeCrash(): void {\n    if (this._options.enableNative) {\n      // tslint:disable-next-line: no-unsafe-any\n      RNSentry.crash();\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(\n    exception: any,\n    hint?: EventHint\n  ): PromiseLike<Event> {\n    return this._browserBackend.eventFromException(exception, hint);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(\n    message: string,\n    level: Severity = Severity.Info,\n    hint?: EventHint\n  ): PromiseLike<Event> {\n    return this._browserBackend.eventFromMessage(message, level, hint);\n  }\n}\n"]}