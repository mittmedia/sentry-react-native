{"version":3,"file":"debugsymbolicator.js","sourceRoot":"","sources":["../../../src/js/integrations/debugsymbolicator.ts"],"names":[],"mappings":"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","sourcesContent":["import { addGlobalEventProcessor, getCurrentHub } from \"@sentry/core\";\nimport { Event, EventHint, Integration, StackFrame } from \"@sentry/types\";\nimport { logger } from \"@sentry/utils\";\n\nconst INTERNAL_CALLSITES_REGEX = new RegExp(\n  [\n    \"/Libraries/Renderer/oss/ReactNativeRenderer-dev\\\\.js$\",\n    \"/Libraries/BatchedBridge/MessageQueue\\\\.js$\"\n  ].join(\"|\")\n);\n\n/**\n * React Native Stack Frame\n */\ninterface ReactNativeFrame {\n  // arguments: []\n  column: number;\n  file: string;\n  lineNumber: number;\n  methodName: string;\n}\n\n/**\n * React Native Error\n */\ntype ReactNativeError = Error & {\n  framesToPop?: number;\n  jsEngine?: string;\n  preventSymbolication?: boolean;\n  componentStack?: string;\n};\n\n/** Tries to symbolicate the JS stack trace on the device. */\nexport class DebugSymbolicator implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = DebugSymbolicator.id;\n  /**\n   * @inheritDoc\n   */\n  public static id: string = \"DebugSymbolicator\";\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    // tslint:disable-next-line: cyclomatic-complexity\n    addGlobalEventProcessor(async (event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(DebugSymbolicator);\n      // tslint:disable: strict-comparisons\n      if (!self || hint === undefined || hint.originalException === undefined) {\n        return event;\n      }\n\n      const reactError = hint.originalException as ReactNativeError;\n\n      // tslint:disable: no-unsafe-any\n      const parseErrorStack = require(\"react-native/Libraries/Core/Devtools/parseErrorStack\");\n      const stack = parseErrorStack(reactError);\n\n      // Ideally this should go into contexts but android sdk doesn't support it\n      event.extra = {\n        ...event.extra,\n        componentStack: reactError.componentStack,\n        jsEngine: reactError.jsEngine\n      };\n\n      if (__DEV__) {\n        await self._symbolicate(event, stack);\n      }\n      if (reactError.jsEngine === \"hermes\") {\n        const convertedFrames = this._convertReactNativeFramesToSentryFrames(\n          stack\n        );\n        this._replaceFramesInEvent(event, convertedFrames);\n      }\n\n      event.platform = \"node\"; // Setting platform node makes sure we do not show source maps errors\n\n      // tslint:enable: no-unsafe-any\n      // tslint:enable: strict-comparisons\n      return event;\n    });\n  }\n\n  /**\n   * Symbolicates the stack on the device talking to local dev server.\n   * Mutates the passed event.\n   */\n  private async _symbolicate(\n    event: Event,\n    stack: string | undefined\n  ): Promise<void> {\n    // tslint:disable: no-unsafe-any\n    // tslint:disable: strict-comparisons\n    try {\n      const symbolicateStackTrace = require(\"react-native/Libraries/Core/Devtools/symbolicateStackTrace\");\n      const prettyStack = await symbolicateStackTrace(stack);\n      if (prettyStack) {\n        const stackWithoutInternalCallsites = prettyStack.filter(\n          (frame: any) =>\n            frame.file && frame.file.match(INTERNAL_CALLSITES_REGEX) === null\n        );\n\n        const symbolicatedFrames = this._convertReactNativeFramesToSentryFrames(\n          stackWithoutInternalCallsites\n        );\n        this._replaceFramesInEvent(event, symbolicatedFrames);\n      } else {\n        logger.error(\"The stack is null\");\n      }\n    } catch (error) {\n      logger.warn(`Unable to symbolicate stack trace: ${error.message}`);\n    }\n    // tslint:enable: no-unsafe-any\n    // tslint:enable: strict-comparisons\n  }\n\n  /**\n   * Converts ReactNativeFrames to frames in the Sentry format\n   * @param frames ReactNativeFrame[]\n   */\n  private _convertReactNativeFramesToSentryFrames(\n    frames: ReactNativeFrame[]\n  ): StackFrame[] {\n    // Below you will find lines marked with :HACK to prevent showing errors in the sentry ui\n    // But since this is a debug only feature: This is Fine (TM)\n    return frames.map(\n      (frame: ReactNativeFrame): StackFrame => {\n        const inApp =\n          (frame.file && !frame.file.includes(\"node_modules\")) ||\n          (!!frame.column && !!frame.lineNumber);\n        return {\n          colno: frame.column,\n          filename: frame.file,\n          function: frame.methodName,\n          in_app: inApp,\n          lineno: inApp ? frame.lineNumber : undefined, // :HACK\n          platform: inApp ? \"javascript\" : \"node\" // :HACK\n        };\n      }\n    );\n  }\n\n  /**\n   * Replaces the frames in the exception of a error.\n   * @param event Event\n   * @param frames StackFrame[]\n   */\n  private _replaceFramesInEvent(event: Event, frames: StackFrame[]): void {\n    if (\n      event.exception &&\n      event.exception.values &&\n      event.exception.values[0] &&\n      event.exception.values[0].stacktrace\n    ) {\n      event.exception.values[0].stacktrace.frames = frames.reverse();\n    }\n  }\n}\n"]}