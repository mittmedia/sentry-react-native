{"version":3,"file":"reactnativeerrorhandlers.js","sourceRoot":"","sources":["../../../src/js/integrations/reactnativeerrorhandlers.ts"],"names":[],"mappings":"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","sourcesContent":["import { getCurrentHub } from \"@sentry/core\";\nimport { Integration, Severity } from \"@sentry/types\";\nimport { logger } from \"@sentry/utils\";\n\nimport { ReactNativeClient } from \"../client\";\n\n/** ReactNativeErrorHandlers Options */\ninterface ReactNativeErrorHandlersOptions {\n  onerror: boolean;\n  onunhandledrejection: boolean;\n}\n\ndeclare const global: any;\n\n/** ReactNativeErrorHandlers Integration */\nexport class ReactNativeErrorHandlers implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public name: string = ReactNativeErrorHandlers.id;\n\n  /**\n   * @inheritDoc\n   */\n  public static id: string = \"ReactNativeErrorHandlers\";\n\n  /** ReactNativeOptions */\n  private readonly _options: ReactNativeErrorHandlersOptions;\n\n  /** Constructor */\n  public constructor(options?: ReactNativeErrorHandlersOptions) {\n    this._options = {\n      onerror: true,\n      onunhandledrejection: true,\n      ...options\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    this._handleUnhandledRejections();\n    this._handleOnError();\n  }\n\n  // tslint:disable: no-unsafe-any\n\n  /**\n   * Handle Promises\n   */\n  private _handleUnhandledRejections(): void {\n    if (this._options.onunhandledrejection) {\n      // tslint:disable-next-line: no-implicit-dependencies\n      const tracking = require(\"promise/setimmediate/rejection-tracking\");\n      tracking.disable();\n      tracking.enable({\n        allRejections: true,\n        onHandled: () => {\n          // We do nothing\n        },\n        onUnhandled: (id: any, error: any) => {\n          getCurrentHub().captureException(error, {\n            data: { id },\n            originalException: error\n          });\n        }\n      });\n    }\n  }\n\n  /**\n   * Handle erros\n   */\n  private _handleOnError(): void {\n    if (this._options.onerror) {\n      let handlingFatal = false;\n\n      const defaultHandler =\n        ErrorUtils.getGlobalHandler && ErrorUtils.getGlobalHandler();\n\n      ErrorUtils.setGlobalHandler((error: any, isFatal?: boolean) => {\n        // We want to handle fatals, but only in production mode.\n        const shouldHandleFatal = isFatal && !global.__DEV__;\n        if (shouldHandleFatal) {\n          if (handlingFatal) {\n            logger.log(\n              \"Encountered multiple fatals in a row. The latest:\",\n              error\n            );\n            return;\n          }\n          handlingFatal = true;\n        }\n\n        getCurrentHub().withScope(scope => {\n          if (isFatal) {\n            scope.setLevel(Severity.Fatal);\n          }\n          getCurrentHub().captureException(error, {\n            originalException: error\n          });\n        });\n\n        const client = getCurrentHub().getClient<ReactNativeClient>();\n        // If in dev, we call the default handler anyway and hope the error will be sent\n        // Just for a better dev experience\n        if (client && !__DEV__) {\n          client.flush(client.getOptions().shutdownTimeout || 2000).then(() => {\n            defaultHandler(error, isFatal);\n          });\n        } else {\n          // If there is no client something is fishy, anyway we call the default handler\n          defaultHandler(error, isFatal);\n        }\n      });\n    }\n  }\n\n  // tslint:enable: no-unsafe-any\n}\n"]}