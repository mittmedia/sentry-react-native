{"version":3,"file":"sdk.js","sourceRoot":"","sources":["../../src/js/sdk.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  defaultIntegrations,\n  getCurrentHub,\n  Integrations\n} from \"@sentry/browser\";\nimport { initAndBind, setExtra } from \"@sentry/core\";\nimport { RewriteFrames } from \"@sentry/integrations\";\nimport { StackFrame } from \"@sentry/types\";\n\nimport { ReactNativeOptions } from \"./backend\";\nimport { ReactNativeClient } from \"./client\";\nimport {\n  DebugSymbolicator,\n  DeviceContext,\n  ReactNativeErrorHandlers,\n  Release\n} from \"./integrations\";\n\nconst IGNORED_DEFAULT_INTEGRATIONS = [\n  \"GlobalHandlers\", // We will use the react-native internal handlers\n  \"Breadcrumbs\", // We add it later, just not patching fetch\n  \"TryCatch\" // We don't need this\n];\n\n/**\n * Inits the SDK\n */\nexport function init(\n  options: ReactNativeOptions = {\n    enableNative: true,\n    enableNativeCrashHandling: true\n  }\n): void {\n  // tslint:disable: strict-comparisons\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = [\n      new ReactNativeErrorHandlers(),\n      new Release(),\n      ...defaultIntegrations.filter(\n        i => !IGNORED_DEFAULT_INTEGRATIONS.includes(i.name)\n      ),\n      new Integrations.Breadcrumbs({\n        console: false, // If this in enabled it causes problems to native calls on >= RN 0.60\n        fetch: false\n      }),\n      new DebugSymbolicator(),\n      new RewriteFrames({\n        iteratee: (frame: StackFrame) => {\n          if (frame.filename) {\n            frame.filename = frame.filename\n              .replace(/^file\\:\\/\\//, \"\")\n              .replace(/^address at /, \"\")\n              .replace(/^.*\\/[^\\.]+(\\.app|CodePush|.*(?=\\/))/, \"\");\n\n            const appPrefix = \"app://\";\n            // We always want to have a tripple slash\n            frame.filename =\n              frame.filename.indexOf(\"/\") === 0\n                ? `${appPrefix}${frame.filename}`\n                : `${appPrefix}/${frame.filename}`;\n          }\n          return frame;\n        }\n      }),\n      new DeviceContext()\n    ];\n  }\n  if (options.enableNative === undefined) {\n    options.enableNative = true;\n  }\n  if (options.enableNativeCrashHandling === undefined) {\n    options.enableNativeCrashHandling = true;\n  }\n  if (options.enableNativeNagger === undefined) {\n    options.enableNativeNagger = true;\n  }\n  // tslint:enable: strict-comparisons\n  initAndBind(ReactNativeClient, options);\n}\n\n/**\n * Sets the release on the event.\n */\nexport function setRelease(release: string): void {\n  setExtra(\"__sentry_release\", release);\n}\n\n/**\n * Sets the dist on the event.\n */\nexport function setDist(dist: string): void {\n  setExtra(\"__sentry_dist\", dist);\n}\n\n/**\n * If native client is available it will trigger a native crash.\n * Use this only for testing purposes.\n */\nexport function nativeCrash(): void {\n  const client = getCurrentHub().getClient<ReactNativeClient>();\n  if (client) {\n    client.nativeCrash();\n  }\n}\n"]}